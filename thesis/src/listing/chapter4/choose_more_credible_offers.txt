def _choose_list_with_more_credible_offers(
        self, combined_offers: Tuple[List[Offer], List[Offer]]
) -> Tuple[Tuple[List[Offer], bool], Tuple[List[Offer], bool]]:
    first_offers, second_offers = combined_offers
    first_average_stars_number: float = self._average_stars_number_for_offers_list(first_offers)
    second_average_stars_number: float = self._average_stars_number_for_offers_list(second_offers)
    if first_average_stars_number > second_average_stars_number:
        result = (first_offers, True), (second_offers, False)
    elif first_average_stars_number < second_average_stars_number:
        result = (second_offers, True), (first_offers, False)
    else:
        raise ChoosingCredibleOfferNotPossibleException()
    return result

def _average_stars_number_for_offers_list(self, offers: List[Offer]) -> float:
    offers_mean_sum = np.sum(
        [self._calculate_reviews_mean(offer.reviews) for offer in offers]
    )
    return round(offers_mean_sum / len(offers), 2)

def _calculate_reviews_mean(self, reviews: List[ProductReview]) -> int:
    return pd.Series([review.stars_number for review in reviews]).mean()
